version: '3.8'

services:
  # Aplicação principal
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=seu-jwt-secret-aqui
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Aplicação em modo desenvolvimento
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=dev-jwt-secret
      - LOG_LEVEL=debug
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - dev

  # Banco de dados MongoDB
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=senha123
      - MONGO_INITDB_DATABASE=investimentos
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app-network
    restart: unless-stopped

  # Cache Redis
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Nginx para load balancing (opcional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  mongodb_data:
  redis_data:

networks:
  app-network:
    driver: bridge 